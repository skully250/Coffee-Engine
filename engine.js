// Generated by CoffeeScript 1.7.1
(function() {
  var Sprite, engine, input, resources,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  resources = (function() {
    function resources() {}

    resources.prototype.resourceCache = [];

    resources.prototype.loading = [];

    resources.prototype.readyCallBacks = [];

    resources.prototype.load = function(urlOrArr) {
      if (urlOrArr === Array) {
        return urlOrArr.forEach(function(url) {
          return _load(url);
        });
      } else {
        return _load(urlOrArr);
      }
    };

    resources.prototype._load = function(url) {
      var img;
      if (resourceCache[url]) {
        return resourceCache[url];
      } else {
        img = new Image();
        img.onLoad = function() {
          resourceCache[url] = img;
          if (isReady()) {
            return readyCallbacks.forEach(function(func) {
              return func();
            });
          }
        };
        resourceCache[url] = false;
        return img.src = url;
      }
    };

    resources.prototype.get = function(url) {
      return resourceCache[url];
    };

    resources.prototype.isReady = function() {
      var k, ready, _i, _len, _results;
      ready = true;
      _results = [];
      for (_i = 0, _len = resourceCache.length; _i < _len; _i++) {
        k = resourceCache[_i];
        if (resourceCache.hasOwnProperty[k] && !resourceCache[k]) {
          _results.push(ready = false);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    resources.prototype.onReady = function() {
      return readyCallbacks.push(func);
    };

    window.resources = [
      {
        load: load,
        get: get,
        onReady: onReady,
        isReady: isReady
      }
    ];

    return resources;

  })();

  engine = (function(_super) {
    __extends(engine, _super);

    engine.prototype.canvas = null;

    engine.prototype.context = null;

    function engine() {
      this.canvas = document.createElement('canvas');
      this.context = this.canvas.getContext('2d');
      this.setSize(512, 480);
      document.body.appendChild(this.canvas);
    }

    engine.prototype.setSize = function(width, height) {
      var size;
      size = [width, height];
      this.canvas.width = width;
      this.canvas.height = height;
      return size;
    };

    engine.prototype.setBackground = function(imageLoc, fullBackground) {
      var full;
      full = fullBackground || false;
      if (full === false) {
        return this.terrainPattern = this.context.drawImage(imageLoc, 0, 0);
      } else {
        return this.terrainPatter = this.context.createPattern(resources.get('assets/images/test/terrain.png', 'repeat'));
      }
    };

    engine.prototype.renderBackground = function() {
      this.context.fillStyle = this.terrainPattern;
      return this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
    };

    engine.prototype.collides = function(x, y, r, b, x2, y2, r2, b2) {
      return !(r <= x2 || x > r2 || b <= y2 || y > b2);
    };

    engine.prototype.boxCollides = function(pos, size, pos2, size2) {
      return this.collides(pos[0], pos[1], pos[0] + size[0], pos[1] + size[1], pos2[0], pos2[1], pos2[0] + size2[0], pos2[1] + size2[1]);
    };

    return engine;

  })(resources);

  Sprite = (function(_super) {
    __extends(Sprite, _super);

    function Sprite(url, pos, size, speed, frames, dir, once) {
      this.pos = pos;
      this.size = size;
      if (speed === !'number') {
        this.speed = 0;
      }
      this.frames = frames;
      this._index = 0;
      this.url = url;
      this.dir = dir || 'horizontal';
      this.once = once;
    }

    Sprite.prototype.update = function(delta) {
      return this._index += this.speed * delta;
    };

    Sprite.prototype.render = function(context) {
      var frame, idx, img, max, x, y;
      if (speed > 0) {
        max = this.frames.length;
        idx = Math.floor(this._index);
        frame = this.frames[idx % max];
        if (this.once && idx >= max) {
          this.done = true;
          return;
        }
      } else {
        frame = 0;
      }
      x = this.pos[0];
      y = this.pos[1];
      if (this.dir === 'vertical') {
        y += frame * this.size[1];
      } else {
        x += frame * this.size[0];
      }
      img = resources.get(this.url);
      return context.drawImage(img, x, y, this.size[0], this.size[1], 0, 0, this.size[0], this.size[1]);
    };

    return Sprite;

  })(engine);

  window.Sprite = Sprite;

  input = (function() {
    function input() {}

    input.prototype.pressedKeys = [];

    input.prototype.keyDown = [];

    input.prototype.setKey = function(event, status) {
      var code, key;
      code = event.keyCode;
      ({
        key: null
      });
      switch (code) {
        case 32:
          key = 'SPACE';
          break;
        case 37:
          key = 'LEFT';
          break;
        case 38:
          key = 'UP';
          break;
        case 39:
          key = 'RIGHT';
          break;
        case 40:
          key = 'DOWN';
          break;
        default:
          key = String.fromCharCode(code);
      }
      return pressedKeys[key] = status;
    };

    document.addEventListener('keydown', function(e) {
      return setKey(e, true);
    });

    document.addEventListener('keyup', function(e) {
      return setKey(e, false);
    });

    window.addEventListener('blur', function() {
      var pressedKeys;
      return pressedKeys = [];
    });

    window.input = [
      {
        isDown: function(key) {
          return pressedKeys[key.toUpperCase()];
        },
        isPressed: function(key) {
          return key === keyDown;
        }
      }
    ];

    return input;

  })();

}).call(this);
