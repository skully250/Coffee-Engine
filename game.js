// Generated by CoffeeScript 1.7.1
(function() {
  var enemy, entity, game, player, tile, world,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  game = (function() {
    var loading;

    game.prototype.canvas = null;

    game.prototype.context = null;

    game.prototype.entityList = [];

    loading = true;

    function game() {
      var enemy, engine, player, world;
      engine = new engine(540, 480);
      this.canvas = engine.canvas;
      this.context = engine.context;
      this.context.drawImage('assets/menu/loading.png', 0, 0);
      world = new world(60);
      player = new Player(10, 10, 'assets/player.png', 0);
      entityList.push(player);
      enemy = new Enemy(10, 10, 'assets/enemy.png', 0);
      entityList.push(enemy);
      loading = false;
      engine.clear();
    }

    game.prototype.renderEntities = function(entityArr) {
      var k, _i, _ref, _results;
      _results = [];
      for (_i = _ref = k = 0; _ref <= entityArr ? _i < entityArr : _i > entityArr; _ref <= entityArr ? _i++ : _i--) {
        _results.push(renderEntity[k]);
      }
      return _results;
    };

    game.prototype.renderEntity = function(entity) {
      return this.context.drawImage(entity.pos[0], entity.pos[1]);
    };

    game.prototype.render = function() {
      return player.render();
    };

    game.prototype.updateEntity = function(entity, dt) {
      return entite.sprite.update(dt);
    };

    game.prototype.update = function(dt) {
      var lastTime, now;
      now = Date.now();
      dt = (now - lastTime) / 120.0;
      lastTime = now;
      return player.update(dt);
    };

    window.game = game;

    return game;

  })();

  entity = (function() {
    function entity(x, y, sheet, pos) {
      this.x = x;
      this.y = y;
      this.sheet = sheet;
      this.sprite = new Sprite(img, pos, 16, 16, 0);
    }

    entity.prototype.render = function() {
      return this.sprite.render;
    };

    entity.prototype.update = function(dt) {
      return this.sprite.update(dt);
    };

    return entity;

  })();

  player = (function(_super) {
    __extends(player, _super);

    function player(x, y, sheet, pos) {
      player.__super__.constructor.call(this, x, y, sheet, pos);
    }

    player.prototype.render = function() {
      return player.__super__.render.call(this);
    };

    player.prototype.update = function(dt) {
      return player.__super__.update.apply(this, arguments).update(dt);
    };

    return player;

  })(entity);

  enemy = (function(_super) {
    __extends(enemy, _super);

    function enemy(x, y, sheet, pos) {
      enemy.__super__.constructor.call(this, x, y, sheet, pos);
    }

    enemy.prototype.render = function() {
      return enemy.__super__.render.call(this);
    };

    enemy.prototype.update = function(dt) {
      return enemy.__super__.update.call(this, dt);
    };

    return enemy;

  })(entity);

  tile = (function() {
    function tile(sheet, pos) {
      this.sprite = new Sprite(img, pos, 16, 16, 0);
    }

    tile.prototype.render = function(x, y) {
      return this.context.drawImage(this.sprite, x, y);
    };

    tile.prototype.update = function() {
      return this.sprite.update(dt);
    };

    return tile;

  })();

  world = (function() {
    function world(size, type) {
      this.size = size;
      this.type = type || 'normal';
      this.world = [];
      this.generate();
    }

    world.prototype.generate = function() {
      var k, _i, _ref, _results;
      _results = [];
      for (_i = _ref = k = 0; _ref <= size ? _i < size : _i > size; _ref <= size ? _i++ : _i--) {
        _results.push(world[size][size].tile = tile.grass);
      }
      return _results;
    };

    world.prototype.render = function(entityList) {
      var k, _i, _ref, _ref1, _results;
      _results = [];
      for (_i = _ref = k = 0, _ref1 = this.size; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--) {
        _results.push(world[size][size].tile.render(size, size));
      }
      return _results;
    };

    world.prototype.update = function(entityList, dt) {
      var k, _i, _ref, _ref1, _results;
      _results = [];
      for (_i = _ref = k = 0, _ref1 = this.size; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--) {
        _results.push(world[size][size].tile.update(dt));
      }
      return _results;
    };

    return world;

  })();

}).call(this);
